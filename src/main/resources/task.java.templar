package {plugin.package};{\n}
{\n}
import org.gradle.api.DefaultTask;{\n}
import org.gradle.api.logging.Logger;{\n}
import org.gradle.api.tasks.TaskAction;{\n}
{\n}
public class {plugin.task.nameUpper}Task extends DefaultTask {{{\n}
{\t}private Logger logger;{\n}
{\t}private {plugin.nameUpper}PluginExtension extension;{\n}
{\n}
{\t}public {plugin.task.name}Task() {{{\n}
{\t}{\t}setGroup("{plugin.group}");{\n}
{\t}{\t}setDescription("{plugin.task.desciption}");{\n}
{\n}
{\t}{\t}this.logger = getProject().getLogger();{\n}
{\t}}{\n}
{\n}
{\t}@TaskAction{\n}
{\t}public void generate() {{{\n}
{\t}{\t}extension = getProject().getExtensions().findByType({plugin.nameUpper}PluginExtension.class);{\n}
{\n}
{\t}{\t}if (extension == null) {{{\n}
{\t}{\t}{\t}extension = new {plugin.nameUpper}PluginExtension();{\n}
{\t}{\t}}{\n}
{\n}
{\t}{\t}logger.info("This will only be logged when the task is invoked with the --info command line argument.");{\n}
{\t}{\t}logger.debug("This will only be logged when the task is invoked with the --debug command line argument.");{\n}
{\t}{\t}logger.lifecycle("This will be logged as output on standard out.");{\n}
{\n}
{\t}}{\n}
}{\n}
{\n}