package {javaPackage};{\n}

{\n}
// - - - - thoughtfully generated by synapticloop gradle-plugin-java-create - - - - {\n}
//            with the use of synapticloop templar templating language{\n}
//                            (task.java.templar){\n}{\n}

{\n}
import org.gradle.api.DefaultTask;{\n}
import org.gradle.api.logging.Logger;{\n}
import org.gradle.api.tasks.TaskAction;{\n}
{\n}
public class {name}Task extends DefaultTask {{{\n}
{\t}private Logger logger;{\n}
{\t}private {name}PluginExtension extension;{\n}
{\n}
{\t}public {name}Task() {{{\n}
{\t}{\t}setGroup("{displayGroup}");{\n}
{\t}{\t}setDescription("{description}");{\n}
{\n}
{\t}{\t}this.logger = getProject().getLogger();{\n}
{\t}}{\n}
{\n}
{\t}@TaskAction{\n}
{\t}public void generate() {{{\n}
{\t}{\t}extension = getProject().getExtensions().findByType({name}PluginExtension.class);{\n}
{\n}
{\t}{\t}if (extension == null) {{{\n}
{\t}{\t}{\t}extension = new {name}PluginExtension();{\n}
{\t}{\t}}{\n}
{\n}
{\t}{\t}logger.info("This will only be logged when the task is invoked with the --info command line argument.");{\n}
{\t}{\t}logger.debug("This will only be logged when the task is invoked with the --debug command line argument.");{\n}
{\t}{\t}logger.lifecycle("This will be logged as output on standard out.");{\n}
{\n}
{\t}{\t}logger.lifecycle("Logging out the boolean value of 'booleanValue' as '{{}'", extension.getBooleanValue());{\n}
{\t}{\t}logger.lifecycle("Logging out the string value of 'stringValue' as '{{}'", extension.getStringValue());{\n}
{\n}
{\t}{\t}for (String stringListValue : extension.getStringList()) {{{\n}
{\t}{\t}{\t}logger.lifecycle("Logging out the string value from the list 'stringList' as '{{}'", stringListValue);{\n}
{\t}{\t}}{\n}
{\t}}{\n}
}{\n}
{\n}