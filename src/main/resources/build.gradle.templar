/**{\n}
 * {\n}
 * Thoughtfully generated by synapticloop gradle-project-init with the templar{\n}
 * templating language.{\n}
 */{\n}
{\n}
buildscript {{{\n}
{\t}repositories {{{\n}
{\t}{\t}mavenLocal(){\n}
{\t}{\t}maven {{{\n}
{\t}{\t}{\t}url "https://plugins.gradle.org/"{\n}
{\t}{\t}}{\n}
{\t}}{\n}
{\n}
{\t}dependencies {{{\n}
{\t}{\t}classpath '{plugin.publishing.group}:{plugin.name}:1.0.0'{\n}
{\t}}{\n}
}{\n}
{\n}
// list all of the plugins for this project{\n}
plugins {{{\n}
{\t}id 'java'{\n}
{\t}id 'eclipse'{\n}
{\t}id 'intellij'{\n}
{\t}id 'maven'{\n}
{\t}id 'maven-publish'{\n}
{\t}id 'com.gradle.plugin-publish' version '0.9.3'{\n}
{\t}id 'co.riiid.gradle' version '0.4.2'{\n}
{\t}id 'com.jfrog.bintray' version '1.6'{\n}
}{\n}
{\n}
apply plugin: '{plugin.publishing.group}.{plugin.name}'{\n}
{\n}
// textual information for this project{\n}
group = 'synapticloop'{\n}
archivesBaseName = '{plugin.name}'{\n}
description = """{plugin.description}"""{\n}
{\n}
version = '1.0.0'{\n}
{\n}
sourceCompatibility = 1.7{\n}
targetCompatibility = 1.7{\n}
{\n}
{\n}
// all of the repositories that this project will use{\n}
repositories {{{\n}
{\t}mavenLocal(){\n}
{\t}mavenCentral(){\n}
{\t}jcenter(){\n}
}{\n}
{\n}
// now for all of the dependencies{\n}
dependencies {{{\n}
{\n}
{\t}compile gradleApi(){\n}
}{\n}
{\n}
// we always want to fail on version conflict{\n}
configurations.all {{{\n}
{\t}resolutionStrategy {{{\n}
{\t}{\t}failOnVersionConflict(){\n}
{\t}}{\n}
}{\n}
{\n}
/**{\n}
 * Here are the configuration elements for the javaSample task{\n}
 */{\n}
{\n}
{plugin.name} {{{\n}
	{if fn:notNull[plugin.extension]}
	{loop plugin.extension as extension}
		{if fn:notNull[extension.comment]}
			{\t}// {extension.comment}{\n}
		{endif}
		{\t}{entension.name} = 
		{if fn:=[extension.type, 'String']}
			"some string to be set"
		{endif}
		{if fn:=[extension.type, 'Integer']}
			100
		{endif}
		{if fn:=[extension.type, 'Boolean']}
			true
		{endif}
		{if fn:=[extension.type, 'Array']}
			[ "one", "two"]
		{endif}
		{\n}{\n}
	{endloop}
	{endif}
}{\n}
{\n}
/**{\n}
 * Below is everything that you need to publish your plugin{\n}
 */{\n}
{\n}
// The fatJar tasks assembles all of the output files (compiled java, properties {\n}
// etc.) into a single jar{\n}
task fatJar(type: Jar) {{{\n}
{\t}classifier = 'all'{\n}
{\n}
{\t}from(sourceSets.main.output) {{ include "**" }{\n}
}{\n}
{\n}
// we want to ensure that the fatJar task is run{\n}
build.finalizedBy(project.tasks.fatJar){\n}
publishPlugins.finalizedBy(project.tasks.fatJar){\n}
{\n}
// links to javadoc - the javadoc task is needed for the maven publication, not{\n}
// for the publishing of plugins{\n}
def javaApiUrl = 'http://docs.oracle.com/javase/1.7.0/docs/api/'{\n}
def groovyApiUrl = 'http://groovy.codehaus.org/gapi/'{\n}
{\n}
tasks.withType(Javadoc) {{{\n}
{\t}options.links(javaApiUrl, groovyApiUrl){\n}
}{\n}
{\n}
task javadocJar(type: Jar, dependsOn: javadoc) {{{\n}
{\t}classifier = 'javadoc'{\n}
{\t}from 'build/docs/javadoc'{\n}
}{\n}
{\n}
task sourcesJar(type: Jar) {{{\n}
{\t}from sourceSets.main.allSource{\n}
{\t}classifier = 'sources'{\n}
}{\n}
{\n}
publishing {{{\n}
{\t}publications {{{\n}
{\t}{\t}{plugin.publishing.group}(MavenPublication) {{{\n}
{\t}{\t}{\t}from components.java{\n}
{\t}{\t}{\t}artifact sourcesJar{\n}
{\t}{\t}{\t}artifact javadocJar{\n}
{\n}
{\t}{\t}{\t}groupId group{\n}
{\t}{\t}{\t}artifactId archivesBaseName{\n}
{\n}
{\t}{\t}{\t}pom.withXml {{{\n}
{\t}{\t}{\t}{\t}configurations.compile.resolvedConfiguration.firstLevelModuleDependencies.each {{ dep ->{\n}
{\t}{\t}{\t}{\t}{\t}asNode().dependencies[0].dependency.find {{{\n}
{\t}{\t}{\t}{\t}{\t}{\t}it.artifactId[0].text() == dep.moduleName &&{\n}
{\t}{\t}{\t}{\t}{\t}{\t}{\t}{\t}it.groupId[0].text() == dep.moduleGroup{\n}
{\t}{\t}{\t}{\t}{\t}}.scope[0].value = 'compile'{\n}
{\t}{\t}{\t}{\t}}{\n}
{\t}{\t}{\t}}{\n}
{\t}{\t}}{\n}
{\t}}{\n}
}{\n}
{\n}
// Now it is time to publish the plugin{\n}
pluginBundle {{{\n}
{\t}website = 'https://github.com/{plugin.publishing.group}/{plugin.name}'{\n}
{\t}vcsUrl = 'https://github.com/{plugin.publishing.group}/{plugin.name}'{\n}
{\t}description = '{plugin.description}'{\n}
{\t}tags = [ 
	{loop plugin.publishing.tags as tag}
		'{tag}'{if !tagStatus.last}, {endif}
	{endloop}
 ]{\n}
{\n}
{\t}plugins {{{\n}
{\t}{\t}{plugin.name} {{{\n}
{\t}{\t}{\t}id = '{plugin.publishing.group}.{plugin.name}'{\n}
{\t}{\t}{\t}displayName = '{plugin.description}'{\n}
{\t}{\t}}{\n}
{\t}}{\n}
}{\n}
{\n}